- Reported by TheSeeker as fix for disk usage of LCWoT over time: http://stackoverflow.com/questions/13087054/neo4j-log-level-in-embedded-mode
- BUG: 10:38 < nKf> digger3, lcwot sometimes(?) inserts the id while it is still fetching. the nick is "still fetiching" then :-)
- don't remove-add all edges on an identity trustlist update, kinda inefficient for the database
- lock the database when doing trust calculations OR wrap everything in 1 transaction and keep stuff in RAM
- implement incremental trust updates
-- on relationship change (delete or score update)
-- on new node
- when restoring an identity that doesn't publish a trustlist, add seed identities when restoring anyway (via SeekingFor - freenode IRC)


=== Until first BETA ===
- write identity insert keys to plain text file (request from Arnebab)
- check whether we can output evil HTML? (this would be bad), always send HTML output through the freenet filter
- use priority queue for fetches to make sure that own identities are fetched before all others on the queue
-- required for quickly restoring multiple identities
- make priority levels and such configurable

=== After first BETA ===

- create page where you can search for an identity and go to its identity info page (listing all identities is CRAZY)
- add random delay to identity insertion? -> after a restart of freenet local identities may be inserted at similar times.
-- Correlating USK updates times could lead to identity compromise.


=== FAR FUTURE ===
- add event pushing framework thingy such that plugins don't need to fetch the full WoT every N minutes
- check that an ssk request schedule always gets removed from the backlog even if the XML contains errors and thus an identity update isn't executed.
